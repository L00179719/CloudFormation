#This is VPC template

Description:
  This template deploys a VPC, with one public and one private subnet in one Availability zone. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a NAT gateway,
  and default routes for it in the private subnet. Creates one Elastic IP for internet connectivity, and a WebServer in public subnet.

Mappings:
  RegionMap: #Store AMI as variable based on region
    us-east-1:
      AMI: "ami-0df435f331839b2d6" #Linux AMI ID N. Virginia
    us-west-1:
      AMI: "ami-010f8b02680f80998" #Linux AMI ID N. California
    eu-west-1:
      AMI: "ami-0e309a5f3a6dd97ea" #Linux AMI ID N. Ireland

Parameters:
  EnvironmentName:
    Description: Enter a name for your project. # This name will be used as a variable for resources
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC #VPC and IP Adress range
    Type: String
    Default: 172.20.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 172.20.10.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 172.20.20.0/24

  KeyName:
    Description: Enter the name of the EC2 key pair #Choose existing key pair
    Type: AWS::EC2::KeyPair::KeyName
    Default: WebKeyPair

Resources:
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap #Pull AMI ID from Mappings
        - RegionMap
        - !Ref AWS::Region
        - AMI
      InstanceType: t2.micro # Instance Type
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Web Server
      SecurityGroupIds:
        - Fn::GetAtt: #get Security Group id in order to work with subnet
            - InstanceSecurityGroup
            - GroupId
      SubnetId:
        Ref: PublicSubnet1 #Assign webserver to public subnet
      UserData:
        Fn::Base64: !Sub | #web server and app installation
          #!/bin/bash -xe
          sudo yum install -y gcc-c++ 
          sudo yum install -y nodejs
          sudo yum install git -y
          git clone https://github.com/wiesell1923/nodejs.git  
          cd nodejs
          npm install bcrypt
          node app.js

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP access
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Web Server SG AZ1
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "tcp"
          FromPort: 22 #
          ToPort: 22 # Enable SSH access
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80 # Enable HTTP access
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName #name created on console

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: Elastic IP 1

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NatGateway 1 AZ1 - EIP1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

Outputs: #Outputs for VPC Subnets, security group and WebServer IP Address
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [",", [!Ref PublicSubnet1]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [",", [!Ref PrivateSubnet1]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup

  PublicIPAddress:
    Description: Public IP Address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
